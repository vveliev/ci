# yamllint disable rule:line-length
---
name: Terrafrorm plan

'on':
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS Access Key ID
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS Secret Access Key
    inputs:
      terraform_backend_region:
        description: Terraform backend region
        required: false
        default: us-east-1
        type: string
      terraform_workdir:
        description: Terraform working directory, where the terraform code will be executed
        required: false
        default: ./
        type: string
      terraform_var_files:
        description: List of terraform variable files to be used
        required: false
        default: ''
        type: string
      terraform_workspace:
        description: Terraform workspace to be used
        required: false
        default: default
        type: string
      terraform_version:
        description: Terraform version to be used
        required: false
        default: 1.0.9
        type: string
      terraform_apply:
        description: Whether to apply the plan or not
        required: false
        default: false
        type: boolean

jobs:
  plan:
    name: Plan
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.terraform_backend_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Initialize Terraform
        run: |
          cd ${{ inputs.terraform_workdir }}
          terraform init -input=false

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd ${{ inputs.terraform_workdir }}
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1`
      # (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Plan to GitHub PR
        if: inputs.terraform_apply == 'false'
        uses: mshick/add-pr-comment@v2
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ## Terraform Plan for ${{ inputs.terraform_workdir }}
            ### Workspace: ${{ inputs.terraform_workspace }}
            ```diff
            ${{ env.PLAN }}
            ```

      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          cd ${{ inputs.terraform_workdir }}
          terraform apply \
            -input=false \
            -no-color \
            tfplan

      - name: Post Plan and Apply to GitHub PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            Applying ** ${{ inputs.terraform_workdir }}**:

            ```
            ${{ steps.apply.outputs.stdout }}
            ```

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            Plan failed for ** ${{ inputs.terraform_workdir }}**:

            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            Apply failed for ** ${{ inputs.terraform_workdir }}**:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```
